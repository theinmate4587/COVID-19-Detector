# -*- coding: utf-8 -*-
"""COVID CT SCAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVMRk0jEiR5yWfnw8zjdncLeoSGFhtiU
"""

'''from google.colab import drive
drive.mount('/content/drive')'''

train_path='/content/drive/My Drive/Colab Notebooks/COVID /DATA'

import tensorflow as tf

'''
import os
import zipfile

local_zip = '/content/drive/My Drive/Colab Notebooks/COVID /DATA/CT_COVID.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/drive/My Drive/Colab Notebooks/COVID /DATA')
zip_ref.close()
import os
import zipfile

local_zip = '/content/drive/My Drive/Colab Notebooks/COVID /DATA/CT_NonCOVID.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/drive/My Drive/Colab Notebooks/COVID /DATA')
zip_ref.close()
'''

from tensorflow.keras.preprocessing.image import ImageDataGenerator


train_datagen = ImageDataGenerator(rescale=1/255)


train_generator = train_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/COVID /DATA',
        
        target_size=(300, 300),
        
        
        class_mode='binary')

import os
train_CT_dir = os.path.join('/content/drive/My Drive/Colab Notebooks/COVID /DATA/CT_COVID')
train_NONCT_dir = os.path.join('/content/drive/My Drive/Colab Notebooks/COVID /DATA/CT_NonCOVID')

train_CT_names = os.listdir(train_CT_dir)
print(train_CT_names[:10])

train_NONCT_names = os.listdir(train_NONCT_dir)
print(train_NONCT_names[:10])

print('total training CT images:', len(os.listdir(train_CT_dir)))
print('total training NONCT images:', len(os.listdir(train_NONCT_dir)))

import matplotlib.pyplot as plt
import matplotlib.image as mpimg


nrows = 4
ncols = 4


pic_index = 0

fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 4)

pic_index += 8
next_CT_pix = [os.path.join(train_CT_dir, fname) 
                for fname in train_CT_names[pic_index-8:pic_index]]
next_NONCT_pix = [os.path.join(train_NONCT_dir, fname) 
                for fname in train_NONCT_names[pic_index-8:pic_index]]

for i, img_path in enumerate(next_CT_pix+next_NONCT_pix):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

model = tf.keras.models.Sequential([
   
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(300, 300, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
   
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
   
    tf.keras.layers.Flatten(),
    
    tf.keras.layers.Dense(512, activation='relu'),
    
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.summary()

from tensorflow.keras.optimizers import RMSprop

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(lr=0.001),
              metrics=['acc'])

history = model.fit(
      train_generator,
      steps_per_epoch=8, 
      epochs=10,
      
      )

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(300, 300))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(classes[0])
  if classes[0]>0.5:
    print(fn + " is a COVID-19 Negative ")
  else:
    print(fn + " is a COVID-19 Positive")

